(function(){"use strict";var __webpack_modules__={320:function(){eval("\n;// CONCATENATED MODULE: ./build/src/modules/Redirect/resources/js/Redirector.js\n/**\n * The MultilingualPress Redirector module.\n */\nfunction Redirector(languagesStorageKey, timestampStorageKey, redirectSettings, jQuery, navigator, localStorage) {\n  var settings;\n  var allUserLanguages;\n  var noredirect;\n  var contentLanguage;\n  var noRedirectRegex;\n  var init = false;\n  /**\n   * Checks if the stored timestamp is valid.\n   *\n   * @return {Boolean} Whether or not the stored timestamp is valid.\n   */\n\n  var checkTimestamp = function checkTimestamp() {\n    var timestamp = Number(localStorage.getItem(timestampStorageKey));\n    return Date.now() <= timestamp + Number(settings.storageLifetime);\n  };\n  /**\n   * Starts the continuously running timestamp update used to determine the age of stored languages.\n   */\n\n\n  var startTimestampUpdate = function startTimestampUpdate() {\n    var timeout = Number(settings.updateTimestampInterval);\n    var updateTimestamp;\n\n    if (timeout > 0) {\n      updateTimestamp = function updateTimestamp() {\n        localStorage.setItem(timestampStorageKey, Date.now());\n      };\n\n      updateTimestamp();\n      setInterval(updateTimestamp, timeout);\n    }\n  };\n  /**\n   * Returns the given language in the normalized, locale-like form.\n   *\n   * @param {String} language\n   * @return {String}\n   */\n\n\n  var normalizeLanguage = function normalizeLanguage(language) {\n    return language.replace(/-/, '_');\n  };\n  /**\n   * Returns the regionless languages of the user that have not been defined before.\n   *\n   * @returns {String[]} The regionless languages of the user not defined before.\n   */\n\n\n  var userLanguages = function userLanguages() {\n    var browserLanguages;\n\n    if (jQuery.isArray(allUserLanguages)) {\n      return allUserLanguages;\n    }\n\n    browserLanguages = navigator.languages || [navigator.language] || 0 || 0;\n    allUserLanguages = browserLanguages.map(function (language) {\n      return language;\n    });\n    return allUserLanguages.filter(function (language) {\n      return language;\n    });\n  };\n  /**\n   * Returns the stored languages.\n   *\n   * @returns {String[]}\n   */\n\n\n  var storedLanguages = function storedLanguages() {\n    var languages;\n\n    if (!checkTimestamp()) {\n      localStorage.removeItem(languagesStorageKey);\n      return [];\n    }\n\n    languages = localStorage.getItem(languagesStorageKey);\n    return languages ? languages.split(' ') : [];\n  };\n  /**\n   * Checks if the current site language is stored to not get redirected from.\n   *\n   * @returns {Boolean}\n   */\n\n\n  var isCurrentLanguageStored = function isCurrentLanguageStored() {\n    return storedLanguages().includes(normalizeLanguage(settings.currentLanguage));\n  };\n  /**\n   * Stores the given language.\n   *\n   * @param {String} language\n   */\n\n\n  var storeLanguage = function storeLanguage(language) {\n    var languages = storedLanguages();\n    var normalizedLanguage = normalizeLanguage(language);\n\n    if (languages.includes(normalizedLanguage)) {\n      return;\n    }\n\n    languages.push(normalizedLanguage);\n    localStorage.setItem(languagesStorageKey, languages.join(' '));\n  };\n  /**\n   * Returns the noredirect language included in the request, if any.\n   *\n   * @returns {String} Language.\n   */\n\n\n  var noredirectLanguage = function noredirectLanguage() {\n    var matches;\n\n    if (typeof noredirect === 'string') {\n      return noredirect;\n    }\n\n    noredirect = '';\n    matches = noRedirectRegex.exec(window.location.href);\n\n    if (Array.isArray(matches) && matches[2]) {\n      noredirect = decodeURIComponent(matches[2].replace(/\\+/g, ' '));\n    }\n\n    return noredirect;\n  };\n  /**\n   * Returns the best-matching content language for the given user language.\n   *\n   * @param {String} userLanguage\n   * @return {String}\n   */\n\n\n  var matchLanguage = function matchLanguage(userLanguage) {\n    var matched = '';\n\n    if (settings.urls[userLanguage]) {\n      return userLanguage;\n    }\n\n    if (userLanguage.indexOf('-') === -1) {\n      jQuery.each(settings.urls, function (langName) {\n        if (langName.indexOf(userLanguage + '-') === 0) {\n          matched = langName;\n          return false;\n        }\n\n        if (matched === '' && settings.RedirectFallbackSiteLanguageTag && langName === settings.RedirectFallbackSiteLanguageTag) {\n          matched = langName;\n        }\n\n        return true;\n      });\n    }\n\n    return matched;\n  };\n  /**\n   * Returns the best-matching content language, if any.\n   *\n   * @return {String} The best-matching content language.\n   */\n\n\n  var findContentLanguage = function findContentLanguage() {\n    if (typeof contentLanguage === 'string') {\n      return contentLanguage;\n    }\n\n    contentLanguage = '';\n    jQuery.each(userLanguages(), function (i, val) {\n      var matched = matchLanguage(val);\n\n      if (matched) {\n        contentLanguage = matched;\n        return false;\n      }\n\n      return true;\n    });\n    return contentLanguage;\n  };\n  /**\n   * Redirects to the URL according to the given language.\n   *\n   * @param {String} language\n   */\n\n\n  var doRedirect = function doRedirect(language) {\n    var url;\n    storeLanguage(language);\n\n    if (language === settings.currentLanguage) {\n      return;\n    }\n\n    url = settings.urls[language].replace(/\\?.*$/, '');\n    window.location.href = url + '?' + settings.noredirectKey + '=' + normalizeLanguage(language);\n  };\n  /**\n   * Inizialize the class if necessary.\n   */\n\n\n  var initialize = function initialize() {\n    if (!init) {\n      settings = redirectSettings || {\n        currentLanguage: '',\n        noredirectKey: '',\n        storageLifetime: 300000,\n        updateTimestampInterval: 60000,\n        urls: {},\n        RedirectFallbackSiteLanguageTag: ''\n      };\n      startTimestampUpdate();\n      noRedirectRegex = new RegExp('[?&]' + settings.noredirectKey + '(=([^&#]*)|&|#|$)');\n      init = true;\n    }\n  };\n  /**\n   * Perform the redirect if needed.\n   */\n\n\n  this.redirect = function () {\n    initialize();\n\n    if (!settings.noredirectKey || !settings.urls || isCurrentLanguageStored() || !userLanguages()) {\n      return;\n    }\n\n    if (noredirectLanguage()) {\n      storeLanguage(noredirectLanguage());\n      return;\n    }\n\n    if (findContentLanguage()) {\n      doRedirect(findContentLanguage());\n    }\n  };\n}\n;// CONCATENATED MODULE: ./build/src/modules/Redirect/resources/js/frontend.js\n\n\n(function (jQuery, redirectSettings, navigator, localStorage) {\n  window.addEventListener('load', function () {\n    var redirector = new Redirector('mlpNoredirectStorage', 'mlpNoredirectStorageTimestamp', redirectSettings, jQuery, navigator, localStorage);\n    redirector.redirect();\n  });\n})(jQuery, MultilingualPressRedirectorSettings, navigator, localStorage);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///320\n")}},__webpack_exports__={};__webpack_modules__[320]()})();
//# sourceMappingURL=frontend.min.js.map