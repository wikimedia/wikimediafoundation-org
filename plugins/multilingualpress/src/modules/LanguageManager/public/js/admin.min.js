!function(Q){var F={};function n(B){if(F[B])return F[B].exports;var U=F[B]={i:B,l:!1,exports:{}};return Q[B].call(U.exports,U,U.exports,n),U.l=!0,U.exports}n.m=Q,n.c=F,n.d=function(Q,F,B){n.o(Q,F)||Object.defineProperty(Q,F,{enumerable:!0,get:B})},n.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},n.t=function(Q,F){if(1&F&&(Q=n(Q)),8&F)return Q;if(4&F&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var B=Object.create(null);if(n.r(B),Object.defineProperty(B,"default",{enumerable:!0,value:Q}),2&F&&"string"!=typeof Q)for(var U in Q)n.d(B,U,function(F){return Q[F]}.bind(null,U));return B},n.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return n.d(F,"a",F),F},n.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},n.p="",n(n.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./build/src/modules/LanguageManager/resources/js/LanguageManager.js\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar LANGUAGE_ID_REGEXP = /-(\\d+)-/i;\nvar LANGUAGE_NAME_REGEXP = /\\[(\\d+)\\]/i;\nvar NEGATIVE_LANGUAGE_NAME_REGEXP = /\\[-(\\d+)\\]/i;\n/**\n * Create the New Language button element\n *\n * @returns {HTMLElement}\n */\n\nfunction createNewLanguageButton($table, languageManagerStrings) {\n  var button = jQuery(\"<p class=\\\"mlp-new-language\\\">\\n            <button class=\\\"button\\\">\\n                \".concat(languageManagerStrings.newLanguageButtonLabel, \"\\n            </button>\\n        </p>\"));\n  button.insertAfter($table);\n  return button;\n}\n/**\n * Create a language delete action button.\n *\n * @param {HTMLElement} $table\n * @returns {HTMLElement}\n */\n\n\nfunction createLanguageDeleter($table, languageManagerStrings) {\n  var $deletor = jQuery(\"<td data-label=\\\"Deletor\\\">\\n            <button class=\\\"mlp-language-deletor button dashicons dashicons-trash\\\" data-action=\\\"delete\\\">\\n                <span class=\\\"screen-reader-text\\\">\\n                    \".concat(languageManagerStrings.languageDeleteButtonLabel, \"\\n                </span>\\n            </button>\\n        </td>\"));\n  var $deletorHead = jQuery(\"<th scope=\\\"col\\\" data-label=\\\"Deletor\\\">\\n            \".concat(languageManagerStrings.languageDeleteTableHeadLabel, \"\\n        </th>\"));\n  $table.find('thead > tr th:last-of-type').after($deletorHead.clone());\n  $table.find('tfoot > tr th:last-of-type').after($deletorHead.clone());\n  $table.find('tbody > tr td:last-of-type').after($deletor);\n  return jQuery('.mlp-language-deletor');\n}\n/**\n * Clone the table row so it's possible to add more than one language at a time.\n *\n * @returns {HTMLElement}\n */\n\n\nfunction cloneTableRow($tableRow) {\n  var $clone = $tableRow.clone(false);\n  $clone.hide().insertAfter($tableRow);\n  $clone.find('input').each(function (index, input) {\n    jQuery(input).val('');\n    jQuery(input).removeAttr('checked');\n  });\n  return $clone;\n}\n/**\n * Hide Element\n *\n * @returns void\n */\n\n\nfunction hideElement(element) {\n  element = jQuery(element);\n  element.length && element.hide();\n}\n/**\n * Show Element\n *\n * @returns void\n */\n\n\nfunction showElement(element) {\n  element = jQuery(element);\n  element.length && element.show();\n}\n/**\n * Get the next language id to create the new language item.\n *\n * @returns {number}\n */\n\n\nfunction nextLanguageId($tableRow) {\n  var invalidId = -1;\n  var input = $tableRow.find('input');\n\n  if (!input) {\n    return invalidId;\n  }\n\n  var regexp = new RegExp(LANGUAGE_NAME_REGEXP).exec(input[0].getAttribute('name'));\n  return Array.isArray(regexp) ? ++regexp[1] : invalidId;\n}\n/**\n * Increment the language number for inputs\n *\n * Usually done after a table row has been cloned\n *\n * @param $inputs\n * @param number\n */\n\n\nfunction incrementLanguageId($inputs, number) {\n  $inputs.each(function (index, input) {\n    var nameAttribute = input.getAttribute('name');\n    var idAttribute = input.getAttribute('id');\n    input.setAttribute('name', nameAttribute.replace(LANGUAGE_NAME_REGEXP, '[' + number + ']'));\n    input.setAttribute('id', idAttribute.replace(LANGUAGE_ID_REGEXP, '-' + number + '-'));\n  });\n}\n/**\n * Negative numbers means the language will be deleted from the database, positive numbers\n * means language will be updated or created.\n *\n * @param $inputs\n * @param positive\n */\n\n\nfunction changeSignToLanguageId($inputs, positive) {\n  $inputs.each(function (index, input) {\n    var nameAttribute = input.getAttribute('name');\n    input.setAttribute('name', nameAttribute.replace(positive ? NEGATIVE_LANGUAGE_NAME_REGEXP : LANGUAGE_NAME_REGEXP, positive ? '[$1]' : '[-$1]'));\n  });\n}\n/**\n * Add new language row\n *\n * @returns void\n */\n\n\nfunction addLanguage($tableRow) {\n  showElement($tableRow);\n  var nextId = nextLanguageId($tableRow);\n\n  if (-1 === nextId) {\n    return;\n  }\n\n  var $clone = cloneTableRow($tableRow);\n  incrementLanguageId($clone.find('input'), nextId);\n}\n/**\n * Undo Delete Language\n *\n * @param $deleter\n * @param languageManagerStrings\n */\n\n\nfunction undoDeleteLanguage($deleter, languageManagerStrings) {\n  $deleter = jQuery($deleter);\n\n  if (!$deleter.length) {\n    return;\n  }\n\n  var $row = $deleter.parents('tr');\n\n  if (!$row.length) {\n    return;\n  }\n\n  var $undo = $deleter.attr('data-action') === 'undo';\n  var callback = $undo ? function (index, input) {\n    jQuery(input).removeAttr('readonly').css('opacity', 1);\n  } : function (index, input) {\n    jQuery(input).attr('readonly', 'readonly').css('opacity', .2);\n  };\n  var label = $undo ? languageManagerStrings.languageDeleteButtonLabel : languageManagerStrings.languageUndoDeleteButtonLabel;\n  var $inputs = $row.find('input');\n  $inputs.each(callback);\n  $deleter.attr('data-action', $undo ? 'delete' : 'undo').find('span').text(label);\n  $row.find('button').toggleClass('dashicons-undo dashicons-trash');\n  changeSignToLanguageId($inputs, $undo);\n}\n/**\n * Initialize auto complete for the given input element\n *\n * @returns void\n */\n\n\nfunction setupAutocomplete($input) {\n  $input.on('autocompleteselect', function (evt, ui) {\n    var item = 'item' in ui && ui.item;\n    var language = 'language' in item && item.language;\n    var $input = jQuery(evt.currentTarget);\n\n    if (!language) {\n      return;\n    } // Let LanguageSearch do his stuffs before.\n\n\n    setTimeout(function () {\n      fillNewLanguageField($input.parents('tr'), language);\n    }, 0);\n  });\n}\n/**\n * Add the value for a language to inputs within a table row\n *\n * @param $container\n * @param language\n */\n\n\nfunction fillNewLanguageField($container, language) {\n  $container.find('.native-name').val(language.nativeName);\n  $container.find('.english-name').val(language.englishName);\n  $container.find('.iso-639-1').val(language.iso639Code1);\n  $container.find('.iso-639-2').val(language.iso639Code2);\n  $container.find('.iso-639-3').val(language.iso639Code3);\n  $container.find('.iso-639-3').val(language.iso639Code3);\n  $container.find('.locale').val(language.locale);\n  $container.find('.http-code').val(language.httpCode);\n  language.isRtl ? $container.find('.is-rtl').attr('checked', 'checked') : $container.find('.is-rtl').removeAttr('checked');\n}\n/**\n * Retrieve latest table Row\n *\n * @param $table\n * @returns {*}\n */\n\n\nfunction latestTableRow($table) {\n  return $table.find('tbody tr:last-of-type');\n}\n/**\n * Language Manager\n */\n\n\nvar LanguageManager = /*#__PURE__*/function () {\n  /**\n   * LanguageManager Constructor\n   */\n  function LanguageManager(languageManagerStrings, LanguageSearch) {\n    _classCallCheck(this, LanguageManager);\n\n    this.languageManagerStrings = languageManagerStrings;\n    this.didInit = false;\n    this.LanguageSearch = LanguageSearch;\n  }\n  /**\n   * Initialize\n   *\n   * @returns void\n   */\n\n\n  _createClass(LanguageManager, [{\n    key: \"init\",\n    value: function init() {\n      var _this = this;\n\n      if (this.didInit) {\n        return;\n      }\n\n      var $table = jQuery('#mlp-language-manager-table');\n\n      if (!$table) {\n        return;\n      }\n\n      hideElement(latestTableRow($table));\n      var $deleter = createLanguageDeleter($table, this.languageManagerStrings);\n      $deleter.on('click', function (evt) {\n        evt.preventDefault();\n        evt.stopPropagation();\n        undoDeleteLanguage(evt.currentTarget, _this.languageManagerStrings);\n      });\n      var $button = createNewLanguageButton($table, this.languageManagerStrings);\n      $button.click(function (evt) {\n        evt.preventDefault();\n        evt.stopPropagation();\n        var $latestTableRow = latestTableRow($table);\n        var $autocompleteInput = $latestTableRow.find('.native-name');\n        var languageSearch = new _this.LanguageSearch($autocompleteInput);\n        addLanguage($latestTableRow);\n        languageSearch.init();\n        setupAutocomplete($autocompleteInput);\n      });\n      this.didInit = true;\n    }\n  }]);\n\n  return LanguageManager;\n}();\n// CONCATENATED MODULE: ./build/src/modules/LanguageManager/resources/js/admin.js\n\n'use strict';\n\n(function (M, adminpage, languageManagerStrings) {\n  if (adminpage !== 'multilingualpress_page_language-manager') {\n    return;\n  }\n\n  var languageManager = new LanguageManager(languageManagerStrings, M.LanguageSearch);\n  languageManager.init();\n})(MultilingualPress, adminpage, languageManager);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")}]);
//# sourceMappingURL=admin.min.js.map